// internal/services/maintenance_service.go
package services

import (
	"fmt"
	"Device-t/backend/models"
	"Device-t/backend/repositories"
	"net/smtp"
	"os"
)

type MaintenanceService struct {
	Repo *repositories.MaintenanceRepository
}

func NewMaintenanceService(repo *repositories.MaintenanceRepository) *MaintenanceService {
	return &MaintenanceService{Repo: repo}
}

func (s *MaintenanceService) GetAllMaintenances() ([]models.MaintenanceSchedule, error) {
	return s.Repo.GetAll()
}

func (s *MaintenanceService) CreateMaintenance(m *models.MaintenanceSchedule) error {
	err := s.Repo.Create(m)
	if err != nil {
		return err
	}

	// L·∫•y email k·ªπ thu·∫≠t vi√™n ƒë·ªÉ g·ª≠i th√¥ng b√°o
	if m.TechnicianID != nil {
		var techEmail, techName string
		err := s.Repo.DB.QueryRow("SELECT username, email FROM users WHERE id = ?", m.TechnicianID).Scan(&techName, &techEmail)
		if err == nil && techEmail != "" {
			subject := "Th√¥ng b√°o ph√¢n c√¥ng l·ªãch b·∫£o tr√¨"
			
			// m.ScheduledDate l√† string, c√≥ th·ªÉ d√πng tr·ª±c ti·∫øp
			body := fmt.Sprintf(
				"üìå Xin ch√†o %s,\n\n"+
					"B·∫°n v·ª´a ƒë∆∞·ª£c ph√¢n c√¥ng th·ª±c hi·ªán l·ªãch b·∫£o tr√¨ cho thi·∫øt b·ªã #%d\n"+
					"Ng√†y b·∫£o tr√¨: %s\nM√¥ t·∫£: %s\n\nVui l√≤ng ƒëƒÉng nh·∫≠p h·ªá th·ªëng ƒë·ªÉ x√°c nh·∫≠n.",
				techName, m.EquipmentID, m.ScheduledDate, m.Description,
			)
			go sendEmail(techEmail, subject, body)
		}
	}

	return nil
}


func (s *MaintenanceService) UpdateMaintenance(id int, m *models.MaintenanceSchedule) error {
	return s.Repo.Update(id, m)
}

func (s *MaintenanceService) DeleteMaintenance(id int) error {
	return s.Repo.Delete(id)
}

func (s *MaintenanceService) GetByID(id int) (*models.MaintenanceSchedule, error) {
    return s.Repo.GetByID(id)
}


// H√†m g·ª≠i email
func sendEmail(to string, subject string, body string) {
	from := os.Getenv("EMAIL_USER")
	pass := os.Getenv("EMAIL_PASS")

	smtpHost := "smtp.gmail.com"
	smtpPort := "587"

	// HTML email
	htmlBody := fmt.Sprintf(`
		<!DOCTYPE html>
		<html lang="vi">
		<head>
			<meta charset="UTF-8">
			<title>%s</title>
		</head>
		<body style="font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;">
			<div style="max-width: 600px; margin: auto; background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
				<h2 style="color: #1a73e8; text-align: center;">Th√¥ng b√°o l·ªãch b·∫£o tr√¨</h2>
				<p style="font-size: 16px; color: #555;">Xin ch√†o,</p>
				<p style="font-size: 16px; color: #555;">B·∫°n c√≥ l·ªãch b·∫£o tr√¨ s·∫Øp t·ªõi:</p>
				<div style="background-color: #e8f0fe; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center;">
					<span style="font-size: 18px; font-weight: bold; color: #1a73e8;">%s</span>
				</div>
				<p style="font-size: 14px; color: #777;">Vui l√≤ng th·ª±c hi·ªán c√°c b∆∞·ªõc chu·∫©n b·ªã c·∫ßn thi·∫øt cho vi·ªác b·∫£o tr√¨.</p>
				<p style="font-size: 12px; color: #aaa; margin-top: 30px;">N·∫øu b·∫°n kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o n√†y, h√£y li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n.</p>
			</div>
		</body>
		</html>
	`, subject, body)
	message := []byte(
		"To: " + to + "\r\n" +
			"Subject: " + subject + "\r\n" +
			"MIME-version: 1.0;\n" +
			"Content-Type: text/html; charset=\"UTF-8\";\n\n" +
			htmlBody)

	auth := smtp.PlainAuth("", from, pass, smtpHost)
	if err := smtp.SendMail(smtpHost+":"+smtpPort, auth, from, []string{to}, message); err != nil {
		fmt.Println("‚ùå L·ªói g·ª≠i mail:", err)
	} else {
		fmt.Println("üì© Email ƒë√£ g·ª≠i t·ªõi:", to)
	}
}
